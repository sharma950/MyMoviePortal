buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'


group = 'com.mymovieportal'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
    compile group: 'org.modelmapper', name: 'modelmapper', version: '0.3.4'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.1'
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-mail')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'com.google.code.bean-matchers', name: 'bean-matchers', version:'0.10'
	testCompile group: 'org.powermock', name: 'powermock-module-junit4' ,version: '1.6.5'
	testCompile group: 'org.powermock', name: 'powermock-core', version: '1.6.5'
	testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
	testCompile group: 'org.powermock', name: 'powermock-module-junit4-common', version: '1.4.9'
	   
}

ext {
    checkstyleDirPath = "$projectDir/tools/checkstyle"
}

checkstyle {
    toolVersion = "6.17";
    configFile = rootProject.file(checkstyleDirPath + "/checkstyle.xml");
    configProperties = [checkstyleDir: checkstyleDirPath]
    showViolations = true
    ignoreFailures = false
}



tasks.withType(Checkstyle) {
    reports {
        html.destination rootProject.file("$projectDir/tools/checkstyle.html")
    }
 }
 tasks.withType(Pmd) {
    reports {
        html.destination rootProject.file("$projectDir/tools/pmd.html")
    }
 }
 
 
findbugs {
    ignoreFailures = false
    excludeFilter = file("$projectDir/tools/findbugs/findbugs-exclude.xml")
}



tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
 
 task sanity(dependsOn: ['checkstyleMain','findbugsMain','pmdMain']) {
    description 'Executes java unit and integration tests, angular unit tests and code quality tools.'
    doFirst {
        println "Running Sanity"
    }
    doLast {

    }
} 






  
      
           
    
  


